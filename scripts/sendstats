#!/bin/bash
#
# chkconfig: 345 97 05
# description: Java deamon script
#

# Set this to your Java installation
JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64

serviceNameLo="sendstats"                                       # service name with the first letter in lowercase
serviceName="sendstats"                                         # service name
serviceUser="root"                                        # OS user name for the service
serviceGroup="root"                                       # OS group name for the service
applDir="/root/kms-monitoring-java"                           # home directory of the service application
serviceUserHome="/root/"                                      # home directory of the service user
serviceLogFile="/var/log/$serviceNameLo.log"                  # log file for StdOut/StdErr
maxShutdownTime=15                                            # maximum number of seconds to wait for the daemon to terminate normally
pidFile="/var/run/$serviceNameLo.pid"                         # name of PID file (PID = process ID number)
javaCommand="java"                                            # name of the Java launcher without the path
javaExe="$JAVA_HOME/bin/$javaCommand"                         # file name of the Java application launcher executable

EXTERNAL_IP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
instance_name=$(curl http://169.254.169.254/latest/meta-data/hostname)
instance_name=${instance_name::-10}

# Check whether we have the ENV var for monitoring IP available
file="/opt/envvars"
if [ -f "$file" ]
then
  source /opt/envvars
  export $(cut -d= -f1 /opt/envvars)
  javaArgs="-DHOST_NAME=$instance_name -Dgraphite_ip=$NUBOMEDIAMONITORINGIP -Dkms.ws.uri=ws://$EXTERNAL_IP:8888/kurento -cp $applDir/libraries/commons-codec-1.9.jar:$applDir/libraries/commons-logging-1.2.jar:$applDir/libraries/fluent-hc-4.5.1.jar:$applDir/libraries/gson-2.5.jar:$applDir/libraries/guava-19.0.jar:$applDir/libraries/httpclient-4.5.1.jar:$applDir/libraries/httpcore-4.4.3.jar:$applDir/libraries/javax.inject-1.jar:$applDir/libraries/jetty-io-9.3.0.M2.jar:$applDir/libraries/jetty-util-9.3.0.M2.jar:$applDir/libraries/kms-api-core-6.5.0.jar:$applDir/libraries/kms-api-elements-6.5.0.jar:$applDir/libraries/kms-api-filters-6.5.0.jar:$applDir/libraries/kurento-client-6.5.0.jar:$applDir/libraries/kurento-commons-6.5.0.jar:$applDir/libraries/kurento-jsonrpc-client-6.5.0.jar:$applDir/libraries/paranamer-2.7.jar:$applDir/libraries/slf4j-api-1.7.13.jar:$applDir/libraries/websocket-api-9.3.0.M2.jar:$applDir/libraries/websocket-client-9.3.0.M2.jar:$applDir/libraries/websocket-common-9.3.0.M2.jar:$applDir/target/kms-monitoring-java-6.5.0.jar org.kurento.tutorial.kmsmonitor.SendStats"
else
  javaArgs="-DHOST_NAME=$instance_name -Dkms.ws.uri=ws://$EXTERNAL_IP:8888/kurento -cp $applDir/libraries/commons-codec-1.9.jar:$applDir/libraries/commons-logging-1.2.jar:$applDir/libraries/fluent-hc-4.5.1.jar:$applDir/libraries/gson-2.5.jar:$applDir/libraries/guava-19.0.jar:$applDir/libraries/httpclient-4.5.1.jar:$applDir/libraries/httpcore-4.4.3.jar:$applDir/libraries/javax.inject-1.jar:$applDir/libraries/jetty-io-9.3.0.M2.jar:$applDir/libraries/jetty-util-9.3.0.M2.jar:$applDir/libraries/kms-api-core-6.5.0.jar:$applDir/libraries/kms-api-elements-6.5.0.jar:$applDir/libraries/kms-api-filters-6.5.0.jar:$applDir/libraries/kurento-client-6.5.0.jar:$applDir/libraries/kurento-commons-6.5.0.jar:$applDir/libraries/kurento-jsonrpc-client-6.5.0.jar:$applDir/libraries/paranamer-2.7.jar:$applDir/libraries/slf4j-api-1.7.13.jar:$applDir/libraries/websocket-api-9.3.0.M2.jar:$applDir/libraries/websocket-client-9.3.0.M2.jar:$applDir/libraries/websocket-common-9.3.0.M2.jar:$applDir/target/kms-monitoring-java-6.5.0.jar org.kurento.tutorial.kmsmonitor.SendStats"
fi
javaCommandLine="$javaExe $javaArgs"                          # command line to start the Java service application
javaCommandLineKeyword="kms-monitoring-java-6.5.0.jar"       # a keyword that occurs on the commandline, used to detect an already running service process and to distinguish it from others
 
# Makes the file $1 writable by the group $serviceGroup.
function makeFileWritable {
   local filename="$1"
   touch $filename || return 1
   chgrp $serviceGroup $filename || return 1
   chmod g+w $filename || return 1
   return 0; }
 
# Returns 0 if the process with PID $1 is running.
function checkProcessIsRunning {
   local pid="$1"
   if [ -z "$pid" -o "$pid" == " " ]; then return 1; fi
   if [ ! -e /proc/$pid ]; then return 1; fi
   return 0; }
 
# Returns 0 if the process with PID $1 is our Java service process.
function checkProcessIsOurService {
   local pid="$1"
   if [ "$(ps -p $pid --no-headers -o comm)" != "$javaCommand" ]; then return 1; fi
   grep -q --binary -F "$javaCommandLineKeyword" /proc/$pid/cmdline
   if [ $? -ne 0 ]; then return 1; fi
   return 0; }
 
# Returns 0 when the service is running and sets the variable $pid to the PID.
function getServicePID {
   if [ ! -f $pidFile ]; then return 1; fi
   pid="$(<$pidFile)"
   checkProcessIsRunning $pid || return 1
   checkProcessIsOurService $pid || return 1
   return 0; }
 
function startServiceProcess {
   cd $applDir || return 1
   rm -f $pidFile
   makeFileWritable $pidFile || return 1
   makeFileWritable $serviceLogFile || return 1
   cmd="nohup $javaCommandLine >>$serviceLogFile 2>&1 & echo \$! >$pidFile"
   su -m $serviceUser -s $SHELL -c "$cmd" || return 1
   sleep 0.1
   pid="$(<$pidFile)"
   if checkProcessIsRunning $pid; then :; else
      echo -ne "\n$serviceName start failed, see logfile."
      return 1
   fi
   return 0; }
 
function stopServiceProcess {
   kill $pid || return 1
   for ((i=0; i<maxShutdownTime*10; i++)); do
      checkProcessIsRunning $pid
      if [ $? -ne 0 ]; then
         rm -f $pidFile
         return 0
         fi
      sleep 0.1
      done
   echo -e "\n$serviceName did not terminate within $maxShutdownTime seconds, sending SIGKILL..."
   kill -s KILL $pid || return 1
   local killWaitTime=15
   for ((i=0; i<killWaitTime*10; i++)); do
      checkProcessIsRunning $pid
      if [ $? -ne 0 ]; then
         rm -f $pidFile
         return 0
         fi
      sleep 0.1
      done
   echo "Error: $serviceName could not be stopped within $maxShutdownTime+$killWaitTime seconds!"
   return 1; }
 
function startService {
   getServicePID
   if [ $? -eq 0 ]; then echo -n "$serviceName is already running"; RETVAL=0; return 0; fi
   echo -n "Starting $serviceName   "
   startServiceProcess
   if [ $? -ne 0 ]; then RETVAL=1; echo "failed"; return 1; fi
   echo "started PID=$pid"
   RETVAL=0
   return 0; }
 
function stopService {
   getServicePID
   if [ $? -ne 0 ]; then echo -n "$serviceName is not running"; RETVAL=0; echo ""; return 0; fi
   echo -n "Stopping $serviceName   "
   stopServiceProcess
   if [ $? -ne 0 ]; then RETVAL=1; echo "failed"; return 1; fi
   echo "stopped PID=$pid"
   RETVAL=0
   return 0; }
 
function checkServiceStatus {
   echo -n "Checking for $serviceName:   "
   if getServicePID; then
    echo "running PID=$pid"
    RETVAL=0
   else
    echo "stopped"
    RETVAL=3
   fi
   return 0; }
 
function main {
   RETVAL=0
   case "$1" in
      start)                                               # starts the Java program as a Linux service
         startService
         ;;
      stop)                                                # stops the Java program service
         stopService
         ;;
      restart)                                             # stops and restarts the service
         stopService && startService
         ;;
      status)                                              # displays the service status
         checkServiceStatus
         ;;
      *)
         echo "Usage: $0 {start|stop|restart|status}"
         exit 1
         ;;
      esac
   exit $RETVAL
}
 
main $1
